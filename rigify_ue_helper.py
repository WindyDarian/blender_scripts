# Copyright 2017 Windy Darian (Ruoyu Fan). MIT License.
# Created on March 19, 2017
'''
A script to add IK to metarig to keep it in sync with the rig generated by
Rigify. Useful for importing to Unreal Engine to keep the bone hierachy simple.

Rigify has a terrible hierachy for animation retargeting in Unreal Engine,
I want to take advantage of Rigify, while keeping a simple bone hierachy

So I just use metarig to drive my object. while using this script to add IKs to
use the animator-friendly rig generated by Rigify to control the metarig.
And I only export the original metarig to Unreal.
Perfect plan!

Tested with Blender 2.78c
'''

_def_prefix = 'DEF-'
_teeth_eye_def_prefix = 'ORG-' # somehow eye and teeth deform bones does not start witn 'DEF-'

def metarig_ik_to_rigify_rig():
    obj_metarig = bpy.data.objects.get('metarig')
    if obj_metarig is None or obj_metarig.type != 'ARMATURE':
        pass  #TODO: raise an exception
    obj_generated_rig = bpy.data.objects.get('rig')
    if obj_generated_rig is None or obj_generated_rig.type != 'ARMATURE':
        pass  #TODO: raise an exception
    for bone in obj_metarig.pose.bones:
        if bone.name.startswith('eye.') or bone.name.startswith('teeth.'):
            target_name = _teeth_eye_def_prefix + bone.name
        else:
            target_name = _def_prefix + bone.name
        if obj_generated_rig.pose.bones.get(target_name):
            constraint = bone.constraints.new('COPY_TRANSFORMS')
            constraint.target = obj_generated_rig
            constraint.subtarget = target_name

if __name__ == '__main__':
    metarig_ik_to_rigify_rig()
    print('Job done!')
