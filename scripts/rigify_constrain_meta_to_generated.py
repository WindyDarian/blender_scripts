# Copyright 2017-2019 Windy Darian. MIT License.
# Created on March 19, 2017
'''
A script to add constraints to meta rig to keep it in sync with the rig generated by
Rigify. So we can use the simpler meta rig to game engines to keep the bone hierachy simple.

Assuming the meta rig is named 'armature' and generated rig is named 'rig'

Tested with Blender 2.80 beta (7f40d553f903, 1/22/2019)
'''
import bpy

_def_prefix = 'DEF-'
_org_prefix = 'ORG-'
class AddMetarigConstraints(bpy.types.Operator):
    """
    A script to add constraints to meta rig to keep it in sync with the rig generated by Rigify.
    So we can use the simpler meta rig to game engines to keep the bone hierachy simple.
    """
    bl_idname = "windy.add_metarig_constraints"        # Unique identifier for buttons and menu items to reference.
    bl_label = "Add metarig Constraints"         # Display name in the interface.
    bl_options = {'REGISTER', 'UNDO'}  # Enable undo for the operator.

    def add_metarig_constraints(self):
        obj_metarig = bpy.context.view_layer.objects.active
        if obj_metarig is None or obj_metarig.type != 'ARMATURE':
            self.report({'INFO'}, 'metarig needs to be selected!')
            return {'CANCELLED'}
        obj_generated_rig = obj_metarig.data.rigify_target_rig
        if obj_generated_rig is None or obj_generated_rig.type != 'ARMATURE':
            self.report({'INFO'}, 'invalid rigify rig ' + str(obj_generated_rig))
            return {'CANCELLED'}
        for bone in obj_metarig.pose.bones:
            #print("looking for target for {}".format(bone.name))
            target_name = _def_prefix + bone.name
            if not obj_generated_rig.pose.bones.get(target_name):
                target_name = _org_prefix + bone.name
            if obj_generated_rig.pose.bones.get(target_name):
                #print("    found {}".format(target_name))
                constraint = bone.constraints.new('COPY_TRANSFORMS')
                constraint.target = obj_generated_rig
                constraint.subtarget = target_name
            else:
                self.report({'INFO'}, "Couldn't find target for {}".format(bone.name))
        return {'FINISHED'} 

    def execute(self, context):
        return self.add_metarig_constraints()

if __name__ == '__main__':
    add_metarig_constraints()
    print('Job done!')


'''
def clean_up_invalid_data():
    obj_metarig = bpy.data.objects.get('armature')
    if obj_metarig is None or obj_metarig.type != 'ARMATURE':
        pass  #TODO: raise an exception
    for bone in obj_metarig.pose.bones:
        print(bone.constraints)
        constraints_to_delete = []
        for constraint in bone.constraints:
            if isinstance(constraint, bpy.types.CopyTransformsConstraint) and not constraint.target:
                constraints_to_delete.append(constraint)
        for constraint in constraints_to_delete:
            bone.constraints.remove(constraint)
'''