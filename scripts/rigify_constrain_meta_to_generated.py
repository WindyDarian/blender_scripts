# Copyright 2017-2022 Windy Darian. MIT License.
# Created on March 19, 2017
'''
A script to add constraints to meta rig to keep it in sync with the rig generated by
Rigify. So we can use the simpler meta rig to game engines to keep the bone hierachy simple.

Assuming the meta rig is named 'armature' and generated rig is named 'rig'

Tested with Blender 3.3
'''
from .windy_menu import WindyView3dMenu

from re import S
import bpy

_def_prefix = 'DEF-'
_org_prefix = 'ORG-'

def _remove_metarig_bone_rigify_constraint(bone, obj_generated_rig):
    constraints_to_delete = []
    for constraint in bone.constraints:
        if isinstance(constraint, bpy.types.CopyTransformsConstraint) and (constraint.target == obj_generated_rig):
            constraints_to_delete.append(constraint)
    for constraint in constraints_to_delete:
        bone.constraints.remove(constraint)

def _add_metarig_bone_rigify_constraint(bone, obj_generated_rig, operator = None):
    target_name = _def_prefix + bone.name
    if not obj_generated_rig.pose.bones.get(target_name):
        target_name = _org_prefix + bone.name
    if obj_generated_rig.pose.bones.get(target_name):
        #print("    found {}".format(target_name))
        constraint = bone.constraints.new('COPY_TRANSFORMS')
        constraint.target = obj_generated_rig
        constraint.subtarget = target_name
        if bone.name.startswith('heel.'):
            # hack to fix heel orientation between metarig and rigify rig.
            constraint.owner_space = 'LOCAL'
            constraint.target_space = 'LOCAL'
    else:
        if operator is not None:
            operator.report({'INFO'}, "Couldn't find target for {}".format(bone.name))

class AddMetarigConstraints(bpy.types.Operator):
    """
    A script to add constraints to meta rig to keep it in sync with the rig generated by Rigify.
    So we can use the simpler meta rig to game engines to keep the bone hierarchy simple.
    """
    bl_idname = "windy.add_metarig_constraints"
    bl_label = "Add metarig Constraints"
    bl_options = {'REGISTER', 'UNDO'}

    def add_metarig_constraints(self):
        obj_metarig = bpy.context.view_layer.objects.active
        if obj_metarig is None or obj_metarig.type != 'ARMATURE':
            self.report({'INFO'}, 'metarig needs to be selected!')
            return {'CANCELLED'}
        obj_generated_rig = obj_metarig.data.rigify_target_rig
        if obj_generated_rig is None or obj_generated_rig.type != 'ARMATURE':
            self.report({'INFO'}, 'invalid rigify rig ' + str(obj_generated_rig))
            return {'CANCELLED'}
        for bone in obj_metarig.pose.bones:
            # Clear old constraint data.
            _remove_metarig_bone_rigify_constraint(bone, obj_generated_rig)
            _add_metarig_bone_rigify_constraint(bone, obj_generated_rig, operator=self)
        return {'FINISHED'} 

    def execute(self, context):
        return self.add_metarig_constraints()

class RemoveMetarigConstraints(bpy.types.Operator):
    """
    A script to remove constraints added by "Remove metarig Constraints"
    """
    bl_idname = "windy.remove_metarig_constraints"
    bl_label = "Remove metarig Constraints"
    bl_options = {'REGISTER', 'UNDO'}

    def remove_metarig_constraints(self):
        obj_metarig = bpy.context.view_layer.objects.active
        if obj_metarig is None or obj_metarig.type != 'ARMATURE':
            self.report({'INFO'}, 'metarig needs to be selected!')
            return {'CANCELLED'}
        obj_generated_rig = obj_metarig.data.rigify_target_rig
        if obj_generated_rig is None or obj_generated_rig.type != 'ARMATURE':
            self.report({'INFO'}, 'invalid rigify rig ' + str(obj_generated_rig))
            return {'CANCELLED'}
        for bone in obj_metarig.pose.bones:
            # Clear old constraint data.
            _remove_metarig_bone_rigify_constraint(bone, obj_generated_rig)
        return {'FINISHED'} 

    def execute(self, context):
        return self.remove_metarig_constraints()

def menu_func(self, context):
    self.layout.separator()
    self.layout.operator(AddMetarigConstraints.bl_idname)
    self.layout.operator(RemoveMetarigConstraints.bl_idname)

def register():
    bpy.utils.register_class(AddMetarigConstraints)
    bpy.utils.register_class(RemoveMetarigConstraints)
    bpy.types.VIEW3D_MT_windy.append(menu_func)

def unregister():
    bpy.types.VIEW3D_MT_windy.remove(menu_func)
    bpy.utils.unregister_class(RemoveMetarigConstraints)
    bpy.utils.unregister_class(AddMetarigConstraints)

if __name__ == '__main__':
    register()