# Copyright 2017-2019 Windy Darian. MIT License.
# Created on March 19, 2017
'''
A script to add constraints to meta rig to keep it in sync with the rig generated by
Rigify. So we can use the simpler meta rig to game engines to keep the bone hierachy simple.

Assuming the meta rig is named 'armature' and generated rig is named 'rig'

Tested with Blender 2.80 beta (7f40d553f903, 1/22/2019)
'''
import bpy

_def_prefix = 'DEF-'
_org_prefix = 'ORG-'
_metarig_name = 'armature'
_rig_name = 'RIG-armature'
def add_metarig_constraints():
    obj_metarig = bpy.data.objects.get(_metarig_name)
    if obj_metarig is None or obj_metarig.type != 'ARMATURE':
        return {'CANCELLED'}  #TODO: error
    obj_generated_rig = bpy.data.objects.get(_rig_name)
    if obj_generated_rig is None or obj_generated_rig.type != 'ARMATURE':
        return {'CANCELLED'}  #TODO: error
    for bone in obj_metarig.pose.bones:
        print("looking for target for {}".format(bone.name))
        target_name = _def_prefix + bone.name
        if not obj_generated_rig.pose.bones.get(target_name):
            target_name = _org_prefix + bone.name
        if obj_generated_rig.pose.bones.get(target_name):
            print("    found {}".format(target_name))
            constraint = bone.constraints.new('COPY_TRANSFORMS')
            constraint.target = obj_generated_rig
            constraint.subtarget = target_name
        else:
            print("Couldn't find target for {}".format(bone.name))
    return {'FINISHED'} 
'''
def clean_up_invalid_data():
    obj_metarig = bpy.data.objects.get('armature')
    if obj_metarig is None or obj_metarig.type != 'ARMATURE':
        pass  #TODO: raise an exception
    for bone in obj_metarig.pose.bones:
        print(bone.constraints)
        constraints_to_delete = []
        for constraint in bone.constraints:
            if isinstance(constraint, bpy.types.CopyTransformsConstraint) and not constraint.target:
                constraints_to_delete.append(constraint)
        for constraint in constraints_to_delete:
            bone.constraints.remove(constraint)
'''

class AddMetarigConstraints(bpy.types.Operator):
    """
    A script to add constraints to meta rig to keep it in sync with the rig generated by Rigify.
    So we can use the simpler meta rig to game engines to keep the bone hierachy simple.
    """
    bl_idname = "windy.add_metarig_constraints"        # Unique identifier for buttons and menu items to reference.
    bl_label = "Add metarig Constraints"         # Display name in the interface.
    bl_options = {'REGISTER', 'UNDO'}  # Enable undo for the operator.

    def execute(self, context):
        return add_metarig_constraints()

if __name__ == '__main__':
    add_metarig_constraints()
    print('Job done!')
